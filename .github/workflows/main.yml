# This is a basic workflow to help you get started with Actions

name: "Quality Checks"

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the v2.5.0_dev branch
  push:
    branches: [ main, v2_devel, v2_master ]
  pull_request:
    branches: [ main, v2_devel, v2_master]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
  test-armui:
    name: "Test A.R.M UI"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # in this example, there is a newer version already installed, 3.7.7, so the older version will be downloaded
        python-version: ['3.6.0', '3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Fix dependencies
      run: |
        sudo apt-get update && sudo apt-get install libgnutls28-dev libcurl4-openssl-dev libssl-dev libdiscid-dev
    - name: Install A.R.M dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        flake8 . --max-complexity=15 --max-line-length=120 --show-source --statistics
        # stop the build if there are Python syntax errors or undefined names
        #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Fix config files
      run: |
        cp setup/arm.yaml arm.yaml
        sudo mkdir -p /etc/arm/config/ /home/arm/db /home/arm /home/arm/config /home/arm/media /home/arm/music
        sudo cp setup/arm.yaml /etc/arm/config/arm.yaml
        sudo cp setup/apprise.yaml /etc/arm/config/apprise.yaml
        sudo cp setup/.abcde.conf /etc/arm/config/abcde.conf
        sudo mkdir -p /opt/arm/arm
        sudo cp -r arm/migrations /opt/arm/arm
    - name: Run A.R.M ui
      run: timeout 1 python ./arm/runui.py || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
